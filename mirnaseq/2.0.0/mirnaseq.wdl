# Copyright BCBLab, 2019
# microRNA-seq data processing for differential expression analysis of known microRNAs
# Author: Welliton de Souza - well309@gmail.com
# Inputs
# - fastq_files single-end FASTQ files (one per sample)
# - sample_names
# - index_files generated by bowtie-build
# - annotation_file from mirBase (GFF format)
# - count_filename
# Outputs
# - count_file (all samples)
# - filter_stats_files (from TrimGalores, one per sample)
# - align_stats_files (from BWA, one per sample)
# - count_stats_file (from featureCounts)
version 1.0

workflow MirnaSeq {

    input {
        Array[File] fastq_files
        Array[String] sample_names
        File genome_file
        Array[File] index_files
        File annotation_file
        String count_filename = "mirna_counts.txt"
    }

    scatter (idx in range(length(fastq_files))) {
        call Filter {
            input:
                fastq_file = fastq_files[idx],
                sample_name = sample_names[idx],
        }
        call Align {
            input:
                fastq_file = Filter.output_file,
                sample_name = sample_names[idx],
                genome_file = genome_file,
                index_files = index_files
        }
    }

    call Count {
        input:
            align_files = Align.output_file,
            annotation_file = annotation_file,
            output_filename = count_filename
    }

    output {
        File count_file = Count.output_file
        Array[File] trim_stats_files = Filter.stats_file
        Array[File] align_stats_files = Align.stats_file
        File count_stats_file = Count.stats_file
    }
}

task Filter {

    input {
        File fastq_file
        String sample_name
        String adapter="TGGAATTCTCGG"
        Int length = 18
        Int maxLength = 25
	}

	command {
        trim_galore \
            ${fastq_file} \
            --adapter ${adapter} \
            --length ${length} \
            --max_length ~{maxLength} \
            --gzip \
            --basename ${sample_name}
	}

	output {
		File output_file = sample_name + "_trimmed.fq.gz"
		File stats_file = basename(fastq_file) + "_trimming_report.txt"
	}

	runtime {
		docker: "welliton/trimgalore:0.6.4"
	}
}

task Align {

    input {
        File fastq_file
        String sample_name
        File genome_file
        Array[File] index_files
    }

    String bwa_path = "bwa"
    String output_filename = sample_name + ".sam"
    String stats_filename = sample_name + ".stats.txt"

    command {
        ${bwa_path} aln \
            -n 1 \
            -o 0 \
            -e 0 \
            -l 8 \
            -k 0 \
            ${genome_file} \
            ${fastq_file} > ${sample_name}.sai 2> ${stats_filename}
        ${bwa_path} samse \
            ${genome_file} \
            ${sample_name}.sai \
            ${fastq_file} > ${output_filename} 2>> ${stats_filename}
    }

    output {
        File output_file = output_filename
        File stats_file = stats_filename
    }

    runtime {
        docker: "welliton/bwa:0.7.17"
    }
}

task Count {

    input {
        Array[File] align_files
        File annotation_file
        String output_filename

        String format = "GTF"
    }

    command {
        featureCounts \
            -o ${output_filename} \
            -a ${annotation_file} \
            -F ${format} \
            -t miRNA \
            -g Alias \
            --extraAttributes Name \
            -O \
            -s 1 \
            ${sep=' ' align_files}
    }

    output {
        File output_file = output_filename
        File stats_file = output_filename + ".summary"
    }

    runtime {
        docker: "welliton/subread:2.0.0"
    }
}
